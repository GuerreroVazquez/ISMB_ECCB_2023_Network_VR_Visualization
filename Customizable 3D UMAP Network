{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1wKWMuITbaimp0UrI0bFHP8uQTwyxcBiF","timestamp":1689097411451},{"file_id":"1RK7Cog5tMO1Czlyn57LkLVGeCfgkWvTt","timestamp":1689088132574}],"authorship_tag":"ABX9TyM071+2aCceYGh57ibA5hYJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"r1Uax4xUW0Is","executionInfo":{"status":"ok","timestamp":1689861024421,"user_tz":-120,"elapsed":1133,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"outputs":[],"source":["from collections import defaultdict, Counter\n","import itertools\n","import numpy as np\n","import json\n","import random as rd\n","import networkx as nx\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import plotly.graph_objects as go\n","from plotly.offline import init_notebook_mode, iplot"]},{"cell_type":"markdown","source":["## Make a dataframe\n"],"metadata":{"id":"oFn3J7DUW01H"}},{"cell_type":"code","source":[],"metadata":{"id":"546I4eCQj24z","executionInfo":{"status":"ok","timestamp":1689861024421,"user_tz":-120,"elapsed":4,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Uncomment to upload a dataset of your own\n","# import google.colab.files;google.colab.files.upload();"],"metadata":{"id":"x5l4NHBIXPr3","executionInfo":{"status":"ok","timestamp":1689861024421,"user_tz":-120,"elapsed":3,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# read the .csv you uploaded with pandas. pandas has lots of options\n","# to adjust to different formats of datafile: sep (separator), skiprows, index_col and encoding (try latin1)\n","# are especially useful, as is `read_excel`\n","\n","# here we read in file directly from our github\n","df = pd.read_csv(\"https://raw.githubusercontent.com/seasonsOfTheSun/convenient_data_storage/main/pbmc_processed.csv\", index_col=0)"],"metadata":{"id":"94uy5DnPjw7x","executionInfo":{"status":"ok","timestamp":1689861226011,"user_tz":-120,"elapsed":1045,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# examine the dataframe\n","# check that features are on the columns\n","# and samples/observations are along the rows/indices\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"ApLicYCulwm7","executionInfo":{"status":"ok","timestamp":1689861234060,"user_tz":-120,"elapsed":320,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}},"outputId":"ff624bb4-e118-48fc-a0fb-40879d2913ad"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          RER1     EFHD2      SDHB     CAPZB       CDA   TMEM50A  MARCKSL1  \\\n","0    -0.400429  1.246458 -0.372416  0.551672 -0.349284 -0.496061 -0.318515   \n","1     0.466619 -0.694412  0.460624 -0.405235 -0.699058 -0.646480 -0.489694   \n","2     0.980895 -0.364768 -0.455941  1.062497 -0.266909  1.514010 -0.411151   \n","3     1.157570  1.214999 -0.398154  0.397674  2.240295 -0.475881 -0.357897   \n","4    -0.245406 -0.147667 -0.212035  2.184066 -0.041173  2.040868 -0.243580   \n","...        ...       ...       ...       ...       ...       ...       ...   \n","2633 -0.490685 -0.457457 -0.490061 -1.307745 -0.399010  0.830358 -0.412400   \n","2634  0.884633 -0.398557 -0.489190  0.572842 -0.304447  1.420215 -0.432501   \n","2635  1.614859 -0.270552 -0.290423  0.960575 -0.199393 -0.436813 -0.278522   \n","2636 -0.257621  2.185745 -0.216104  1.519202 -0.111231 -0.398332 -0.231740   \n","2637 -0.337064 -0.235522 -0.325246  1.325430 -0.125120 -0.417962 -0.325959   \n","\n","          PPT1     PRDX1      SCP2  ...    LGALS2    LGALS1  APOBEC3A  \\\n","0     1.312571 -0.543318  1.157665  ... -0.679862  0.038500 -0.326638   \n","1    -0.565611 -0.906072  0.409371  ... -1.128205 -2.755259 -0.790060   \n","2     1.002664 -0.679880 -0.562513  ... -0.493011 -1.370785 -0.292832   \n","3    -0.363449  0.973690  1.057711  ...  1.611216  1.405226 -0.270938   \n","4    -0.201623 -0.350429 -0.358985  ... -0.238561  2.460059  0.038602   \n","...        ...       ...       ...  ...       ...       ...       ...   \n","2633  0.916778 -0.711018 -0.581787  ...  2.036843  1.397271 -0.431930   \n","2634 -0.456688 -0.723784 -0.589638  ... -0.539308  0.422145 -0.344255   \n","2635  1.677223 -0.443572 -0.416559  ... -0.467339 -1.112746 -0.146949   \n","2636 -0.194353  2.032063  2.021816  ... -0.356555 -0.819637 -0.028083   \n","2637 -0.309738  1.898755 -0.455360  ... -0.320924 -0.895930 -0.096020   \n","\n","      APOBEC3G  RPS19BP1     SMDT1      TYMP     ATP5O     SUMO3     PRMT2  \n","0     1.232490 -0.424494 -0.668576 -1.014278 -0.844675 -0.376912 -0.405177  \n","1    -0.499003  0.532958 -0.888068 -2.031781 -0.045434 -0.619833 -0.455100  \n","2    -0.408336  0.957930  1.149788 -0.876621 -0.931929 -0.427163  1.051836  \n","3    -0.398694 -0.439359  1.396967  1.659306  0.696504  1.179906 -0.385701  \n","4    -0.334827 -0.336331 -0.605736 -0.176155 -0.661189 -0.224237 -0.352351  \n","...        ...       ...       ...       ...       ...       ...       ...  \n","2633 -0.431349 -0.490184 -0.819441  1.843470  0.941035  0.891006 -0.404160  \n","2634 -0.419214  1.427985 -0.874308 -0.988106 -0.969067 -0.455641 -0.382918  \n","2635 -0.369301 -0.379377  1.305132 -0.603830  1.804272  1.637271  1.557158  \n","2636 -0.344448 -0.338208 -0.570339  2.033555 -0.667973 -0.235610 -0.367732  \n","2637 -0.366309 -0.399337  1.068993 -0.452034 -0.786144 -0.315917 -0.359514  \n","\n","[2638 rows x 230 columns]"],"text/html":["\n","\n","  <div id=\"df-dc55714f-bb7b-4169-a174-561a77ceba16\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RER1</th>\n","      <th>EFHD2</th>\n","      <th>SDHB</th>\n","      <th>CAPZB</th>\n","      <th>CDA</th>\n","      <th>TMEM50A</th>\n","      <th>MARCKSL1</th>\n","      <th>PPT1</th>\n","      <th>PRDX1</th>\n","      <th>SCP2</th>\n","      <th>...</th>\n","      <th>LGALS2</th>\n","      <th>LGALS1</th>\n","      <th>APOBEC3A</th>\n","      <th>APOBEC3G</th>\n","      <th>RPS19BP1</th>\n","      <th>SMDT1</th>\n","      <th>TYMP</th>\n","      <th>ATP5O</th>\n","      <th>SUMO3</th>\n","      <th>PRMT2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.400429</td>\n","      <td>1.246458</td>\n","      <td>-0.372416</td>\n","      <td>0.551672</td>\n","      <td>-0.349284</td>\n","      <td>-0.496061</td>\n","      <td>-0.318515</td>\n","      <td>1.312571</td>\n","      <td>-0.543318</td>\n","      <td>1.157665</td>\n","      <td>...</td>\n","      <td>-0.679862</td>\n","      <td>0.038500</td>\n","      <td>-0.326638</td>\n","      <td>1.232490</td>\n","      <td>-0.424494</td>\n","      <td>-0.668576</td>\n","      <td>-1.014278</td>\n","      <td>-0.844675</td>\n","      <td>-0.376912</td>\n","      <td>-0.405177</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.466619</td>\n","      <td>-0.694412</td>\n","      <td>0.460624</td>\n","      <td>-0.405235</td>\n","      <td>-0.699058</td>\n","      <td>-0.646480</td>\n","      <td>-0.489694</td>\n","      <td>-0.565611</td>\n","      <td>-0.906072</td>\n","      <td>0.409371</td>\n","      <td>...</td>\n","      <td>-1.128205</td>\n","      <td>-2.755259</td>\n","      <td>-0.790060</td>\n","      <td>-0.499003</td>\n","      <td>0.532958</td>\n","      <td>-0.888068</td>\n","      <td>-2.031781</td>\n","      <td>-0.045434</td>\n","      <td>-0.619833</td>\n","      <td>-0.455100</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.980895</td>\n","      <td>-0.364768</td>\n","      <td>-0.455941</td>\n","      <td>1.062497</td>\n","      <td>-0.266909</td>\n","      <td>1.514010</td>\n","      <td>-0.411151</td>\n","      <td>1.002664</td>\n","      <td>-0.679880</td>\n","      <td>-0.562513</td>\n","      <td>...</td>\n","      <td>-0.493011</td>\n","      <td>-1.370785</td>\n","      <td>-0.292832</td>\n","      <td>-0.408336</td>\n","      <td>0.957930</td>\n","      <td>1.149788</td>\n","      <td>-0.876621</td>\n","      <td>-0.931929</td>\n","      <td>-0.427163</td>\n","      <td>1.051836</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.157570</td>\n","      <td>1.214999</td>\n","      <td>-0.398154</td>\n","      <td>0.397674</td>\n","      <td>2.240295</td>\n","      <td>-0.475881</td>\n","      <td>-0.357897</td>\n","      <td>-0.363449</td>\n","      <td>0.973690</td>\n","      <td>1.057711</td>\n","      <td>...</td>\n","      <td>1.611216</td>\n","      <td>1.405226</td>\n","      <td>-0.270938</td>\n","      <td>-0.398694</td>\n","      <td>-0.439359</td>\n","      <td>1.396967</td>\n","      <td>1.659306</td>\n","      <td>0.696504</td>\n","      <td>1.179906</td>\n","      <td>-0.385701</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.245406</td>\n","      <td>-0.147667</td>\n","      <td>-0.212035</td>\n","      <td>2.184066</td>\n","      <td>-0.041173</td>\n","      <td>2.040868</td>\n","      <td>-0.243580</td>\n","      <td>-0.201623</td>\n","      <td>-0.350429</td>\n","      <td>-0.358985</td>\n","      <td>...</td>\n","      <td>-0.238561</td>\n","      <td>2.460059</td>\n","      <td>0.038602</td>\n","      <td>-0.334827</td>\n","      <td>-0.336331</td>\n","      <td>-0.605736</td>\n","      <td>-0.176155</td>\n","      <td>-0.661189</td>\n","      <td>-0.224237</td>\n","      <td>-0.352351</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2633</th>\n","      <td>-0.490685</td>\n","      <td>-0.457457</td>\n","      <td>-0.490061</td>\n","      <td>-1.307745</td>\n","      <td>-0.399010</td>\n","      <td>0.830358</td>\n","      <td>-0.412400</td>\n","      <td>0.916778</td>\n","      <td>-0.711018</td>\n","      <td>-0.581787</td>\n","      <td>...</td>\n","      <td>2.036843</td>\n","      <td>1.397271</td>\n","      <td>-0.431930</td>\n","      <td>-0.431349</td>\n","      <td>-0.490184</td>\n","      <td>-0.819441</td>\n","      <td>1.843470</td>\n","      <td>0.941035</td>\n","      <td>0.891006</td>\n","      <td>-0.404160</td>\n","    </tr>\n","    <tr>\n","      <th>2634</th>\n","      <td>0.884633</td>\n","      <td>-0.398557</td>\n","      <td>-0.489190</td>\n","      <td>0.572842</td>\n","      <td>-0.304447</td>\n","      <td>1.420215</td>\n","      <td>-0.432501</td>\n","      <td>-0.456688</td>\n","      <td>-0.723784</td>\n","      <td>-0.589638</td>\n","      <td>...</td>\n","      <td>-0.539308</td>\n","      <td>0.422145</td>\n","      <td>-0.344255</td>\n","      <td>-0.419214</td>\n","      <td>1.427985</td>\n","      <td>-0.874308</td>\n","      <td>-0.988106</td>\n","      <td>-0.969067</td>\n","      <td>-0.455641</td>\n","      <td>-0.382918</td>\n","    </tr>\n","    <tr>\n","      <th>2635</th>\n","      <td>1.614859</td>\n","      <td>-0.270552</td>\n","      <td>-0.290423</td>\n","      <td>0.960575</td>\n","      <td>-0.199393</td>\n","      <td>-0.436813</td>\n","      <td>-0.278522</td>\n","      <td>1.677223</td>\n","      <td>-0.443572</td>\n","      <td>-0.416559</td>\n","      <td>...</td>\n","      <td>-0.467339</td>\n","      <td>-1.112746</td>\n","      <td>-0.146949</td>\n","      <td>-0.369301</td>\n","      <td>-0.379377</td>\n","      <td>1.305132</td>\n","      <td>-0.603830</td>\n","      <td>1.804272</td>\n","      <td>1.637271</td>\n","      <td>1.557158</td>\n","    </tr>\n","    <tr>\n","      <th>2636</th>\n","      <td>-0.257621</td>\n","      <td>2.185745</td>\n","      <td>-0.216104</td>\n","      <td>1.519202</td>\n","      <td>-0.111231</td>\n","      <td>-0.398332</td>\n","      <td>-0.231740</td>\n","      <td>-0.194353</td>\n","      <td>2.032063</td>\n","      <td>2.021816</td>\n","      <td>...</td>\n","      <td>-0.356555</td>\n","      <td>-0.819637</td>\n","      <td>-0.028083</td>\n","      <td>-0.344448</td>\n","      <td>-0.338208</td>\n","      <td>-0.570339</td>\n","      <td>2.033555</td>\n","      <td>-0.667973</td>\n","      <td>-0.235610</td>\n","      <td>-0.367732</td>\n","    </tr>\n","    <tr>\n","      <th>2637</th>\n","      <td>-0.337064</td>\n","      <td>-0.235522</td>\n","      <td>-0.325246</td>\n","      <td>1.325430</td>\n","      <td>-0.125120</td>\n","      <td>-0.417962</td>\n","      <td>-0.325959</td>\n","      <td>-0.309738</td>\n","      <td>1.898755</td>\n","      <td>-0.455360</td>\n","      <td>...</td>\n","      <td>-0.320924</td>\n","      <td>-0.895930</td>\n","      <td>-0.096020</td>\n","      <td>-0.366309</td>\n","      <td>-0.399337</td>\n","      <td>1.068993</td>\n","      <td>-0.452034</td>\n","      <td>-0.786144</td>\n","      <td>-0.315917</td>\n","      <td>-0.359514</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2638 rows × 230 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc55714f-bb7b-4169-a174-561a77ceba16')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-c8c413a5-2967-4182-8f59-f14bfa447ef4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8c413a5-2967-4182-8f59-f14bfa447ef4')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-c8c413a5-2967-4182-8f59-f14bfa447ef4 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dc55714f-bb7b-4169-a174-561a77ceba16 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dc55714f-bb7b-4169-a174-561a77ceba16');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### Make a Network using UMAP"],"metadata":{"id":"RqUYKyYyDtBP"}},{"cell_type":"code","source":["!pip install umap-learn==0.5.3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jEY7cjbgFYo8","executionInfo":{"status":"ok","timestamp":1689861247751,"user_tz":-120,"elapsed":8818,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}},"outputId":"954c61c7-e33a-4cc3-a3f0-a5602594ae6b"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting umap-learn==0.5.3\n","  Downloading umap-learn-0.5.3.tar.gz (88 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m88.2/88.2 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from umap-learn==0.5.3) (1.22.4)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.10/dist-packages (from umap-learn==0.5.3) (1.2.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.10/dist-packages (from umap-learn==0.5.3) (1.10.1)\n","Requirement already satisfied: numba>=0.49 in /usr/local/lib/python3.10/dist-packages (from umap-learn==0.5.3) (0.56.4)\n","Collecting pynndescent>=0.5 (from umap-learn==0.5.3)\n","  Downloading pynndescent-0.5.10.tar.gz (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from umap-learn==0.5.3) (4.65.0)\n","Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.49->umap-learn==0.5.3) (0.39.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from numba>=0.49->umap-learn==0.5.3) (67.7.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from pynndescent>=0.5->umap-learn==0.5.3) (1.3.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22->umap-learn==0.5.3) (3.1.0)\n","Building wheels for collected packages: umap-learn, pynndescent\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82816 sha256=c5c08226b68fdba5cbb634dfcd519dc213dd2cced98b52b8d85f16a6dfb06858\n","  Stored in directory: /root/.cache/pip/wheels/a0/e8/c6/a37ea663620bd5200ea1ba0907ab3c217042c1d035ef606acc\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.10-py3-none-any.whl size=55622 sha256=b549f72393b3678bfc98940805a4cc578354830490d42486ef11a3fa93aaa2e7\n","  Stored in directory: /root/.cache/pip/wheels/4a/38/5d/f60a40a66a9512b7e5e83517ebc2d1b42d857be97d135f1096\n","Successfully built umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn\n","Successfully installed pynndescent-0.5.10 umap-learn-0.5.3\n"]}]},{"cell_type":"code","source":["# creates the underlying network that is always generated (but usually hidden)\n","# whenever UMAP is called.\n","import umap.umap_\n","rndstate = np.random.RandomState(108)\n","umap_spmat,_,_ = umap.umap_.fuzzy_simplicial_set(df, 5, rndstate, \"euclidean\")\n","G = nx.from_scipy_sparse_array(umap_spmat)"],"metadata":{"id":"Zkb5ql0GFxN-","executionInfo":{"status":"ok","timestamp":1689861331328,"user_tz":-120,"elapsed":83580,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["\n","## Generic Network Layout\n","\n","The spring layout is the most generic possible layout, but can imporved somwhat by initialising with a spectral layout."],"metadata":{"id":"dviDXCP3JUdV"}},{"cell_type":"code","source":["# Intialise a spring layout with a spectral layout\n","# to improve convergence speed and make better layout\n","init_pos = nx.spectral_layout(G, dim=3)\n","pos = nx.spring_layout(G, pos=init_pos, dim=3)"],"metadata":{"id":"mai7HnbEHMn_","executionInfo":{"status":"ok","timestamp":1689861391218,"user_tz":-120,"elapsed":59894,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["### Detect and Color Communities"],"metadata":{"id":"tsuqG0l2XBdy"}},{"cell_type":"code","source":["# Creating an empty dictionary to store node-community mapping\n","node_community = {}\n","# Iterating over the communities generated using Louvain algorithm\n","for i, v in enumerate(nx.community.louvain_communities(G)):\n","  # Iterating over the nodes in each community\n","  for j in v:\n","    # Assigning the community index 'i' to the node 'j'\n","    node_community[j] = i\n","# At this point, the 'node_community' dictionary contains\n","# the mapping of each node to its corresponding community's index."],"metadata":{"id":"VEx_TS92YgKx","executionInfo":{"status":"ok","timestamp":1689861395218,"user_tz":-120,"elapsed":4003,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["import numpy as np  # Importing the numpy library for generating random numbers\n","\n","# Generate a color map dictionary where each specified key is mapped to a random hexadecimal color\n","# Format the RGB values into a hexadecimal color code and return it in uppercase\n","def generate_random_hex():\n","  rgb = np.random.randint(0, 255, size=(3,))\n","  return '#{:02x}{:02x}{:02x}'.format(*rgb).upper()\n","\n","# Generate a color map dictionary where each specified key is mapped to a random hexadecimal color\n","def generate_cmap(key):\n","  return {i: generate_random_hex() for i in key}\n","\n","# Generate a color map using the node_community values\n","cmap = generate_cmap(node_community)\n","# Assign colors to each node based on their corresponding community value using the color map\n","node_colors = {i: cmap[v] for i, v in node_community.items()}\n"],"metadata":{"id":"05sEbuXaXFIZ","executionInfo":{"status":"ok","timestamp":1689861395219,"user_tz":-120,"elapsed":4,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["\n","## Plotly Preview, and Select Eigenvectors\n"],"metadata":{"id":"eOOkSpm7XJk2"}},{"cell_type":"markdown","source":["### Define The Function `plotly_preview`"],"metadata":{"id":"ND8yDgAyYvtM"}},{"cell_type":"code","source":["\n","import plotly.offline\n","def plotly_preview(G, pos, node_colors=None, edge_colors=None):\n","\n","    \"\"\"\n","    Generate a 3D network visualization using Plotly.\n","\n","    Parameters:\n","        - G (networkx.Graph): The graph object representing the network.\n","        - pos3D (dict): A dictionary mapping each node to its 3D coordinates (x, y, z).\n","        - node_colors (dict, optional): A dictionary mapping nodes to custom hex colors.\n","                                        If not provided, the default color is '#40b9d4'.\n","        - edge_colors (dict, optional): A dictionary mapping edges to custom hex colors.\n","                                        If not provided, the default color is 'gray'.\n","\n","    Output:\n","        - An HTML file named 'network_visualization.html' is generated, which opens in a web browser.\n","\n","    Example usage:\n","        node_colors = {1: '#ff0000', 2: '#00ff00', 3: '#0000ff'}\n","        edge_colors = {(1, 2): '#ff00ff', (2, 3): '#ffff00'}\n","        pos = nx.spring_layout(G,dim=3)\n","        plotly_review_2(G, pos, node_colors, edge_colors)\n","    \"\"\"\n","\n","    # Create a Plotly figure\n","    fig = go.Figure()\n","\n","    # Add nodes to the figure\n","    for node in G.nodes():\n","        x, y, z = pos[node]\n","        color = node_colors[node] if node_colors and node in node_colors else '#40b9d4'\n","        fig.add_trace(go.Scatter3d(\n","            x=[x],\n","            y=[y],\n","            z=[z],\n","            mode='markers',\n","            marker=dict(\n","                size=5,\n","                color=color,\n","            ),\n","            name=str(node),\n","            text=str(node),\n","            hovertemplate=None,\n","        ))\n","\n","    # Add edges to the figure\n","    for edge in G.edges():\n","        x0, y0, z0 = pos[edge[0]]\n","        x1, y1, z1 = pos[edge[1]]\n","        edge_color = edge_colors[edge] if edge_colors and edge in edge_colors else 'gray'\n","        fig.add_trace(go.Scatter3d(\n","            x=[x0, x1],\n","            y=[y0, y1],\n","            z=[z0, z1],\n","            mode='lines',\n","            line=dict(\n","                color=edge_color,\n","                width=1,\n","            ),\n","            hoverinfo='none',\n","        ))\n","\n","    # Set layout options\n","    fig.update_layout(\n","        scene=dict(\n","            xaxis=dict(visible=False),\n","            yaxis=dict(visible=False),\n","            zaxis=dict(visible=False),\n","        ),\n","        showlegend=False,\n","        hovermode='closest',\n","        margin=dict(l=0, r=0, b=0, t=0),\n","    )\n","\n","    # Display the plot inline in the notebook\n","    iplot(fig)\n","    plotly.offline.plot(fig, filename='plotly_plot.html')\n"],"metadata":{"id":"2vuVEKW0X90a","executionInfo":{"status":"ok","timestamp":1689861395219,"user_tz":-120,"elapsed":3,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["### Use the Function"],"metadata":{"id":"X4AATgPxY0by"}},{"cell_type":"code","source":["# Uncomment to see a preview of the full network = you may  is too big for preview to properly handle!\n","# plotly_preview(G,pos,node_colors=node_colors)"],"metadata":{"id":"LNHohfeFzD-M","executionInfo":{"status":"ok","timestamp":1689861395582,"user_tz":-120,"elapsed":366,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["plotly_preview(G,pos,node_colors=node_colors)"],"metadata":{"id":"Le6JM40dY5sp","colab":{"base_uri":"https://localhost:8080/","height":542,"output_embedded_package_id":"1WcsLI1JBktxFV5q1x-VzkeEUGzykNua1"},"executionInfo":{"status":"ok","timestamp":1689861421966,"user_tz":-120,"elapsed":26387,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}},"outputId":"c5fb5ef5-bc6e-4577-d4ab-e6cfc75093ac"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["import google.colab.files\n","google.colab.files.download(\"plotly_plot.html\")"],"metadata":{"id":"tYx4M0ygaDSx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689861421967,"user_tz":-120,"elapsed":6,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}},"outputId":"b7aed5c2-0699-4cb0-9be1-30ec3c380282"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_c15c695e-6008-40b5-99e0-f98e8de5bac6\", \"plotly_plot.html\", 6300254)"]},"metadata":{}}]},{"cell_type":"markdown","source":["\n","## Export JSON\n","\n","\n"],"metadata":{"id":"bIM_x9bwXOE0"}},{"cell_type":"markdown","source":["### Define Function `make_json`"],"metadata":{"id":"rC0PuutWYTA8"}},{"cell_type":"code","source":["\n","def make_json(name, network, positions, node_color = '#40b9d4', link_color = '#999999', annotations = 'None', communities = 'None'):\n","    \"\"\"\n","    Generates a JSON file from a given network graph using the specified parameters.\n","\n","    Args:\n","        name (str, optional): Name of the graph.\n","        network (networkx.Graph): Network graph object.\n","        positions (dict): Dictionary mapping node IDs to their positions.\n","        node_color (dict): Dictionary mapping node IDs to their (hex-)colors.\n","        link_color (str or dict): (Hex-)color value for all links in the graph or dict with node tuple as key and hex color as value.\n","        communities (dict): 'None' for no communities (default) or dictionary mapping node IDs to their corresponding community ID.\n","        annotations (dict): Dictionary mapping node IDs to a list of annotations.\n","\n","    Returns:\n","        None\n","\n","    \"\"\"\n","\n","    # --------------------------\n","    # Generate VR GRAPH\n","    # --------------------------\n","    GVR = nx.Graph()\n","    GVR.graph['name'] = name\n","\n","    # --------------------------------------\n","    # LOOKUP FOR NODE NAMES INTO IDs and vv\n","    # --------------------------------------\n","    d_idx_node = {}\n","    d_node_idx = {}\n","    for i, node in enumerate(sorted(network.nodes())):\n","        d_idx_node[i] = node\n","        d_node_idx[node] = i\n","    GVR.add_nodes_from(d_idx_node.keys())\n","\n","    for edge in network.edges()(data=True):\n","        GVR.add_edge(d_node_idx[edge[0]],d_node_idx[edge[1]])\n","\n","    # --------------------------\n","    # POS\n","    # --------------------------\n","    if isinstance(positions[next(iter(positions))], list):\n","        pass\n","    else:\n","        for key in positions:\n","            positions[key] = positions[key].tolist()\n","\n","    posG = {d_node_idx[node]: list(xyz) for node, xyz in positions.items()}\n","    nx.set_node_attributes(GVR, posG, name=\"pos\")\n","\n","    # # --------------------------\n","    # # CLUSTER\n","    # # --------------------------\n","    if communities == 'None':\n","        dict_for_cluster = dict(zip(d_idx_node.keys(), [0 for _ in d_idx_node.keys()]))\n","    else:\n","        d_VRids_cluster = {d_node_idx[node]: str(cl_id) for node, cl_id in communities.items()}\n","        nx.set_node_attributes(GVR, d_VRids_cluster, name=\"cluster\")\n","\n","\n","    # --------------------------\n","    # NODE COLOR\n","    # --------------------------\n","    d_node_colors={}\n","\n","    if isinstance(node_color, dict):\n","        for nodeid in GVR.nodes():\n","            d_node_colors[nodeid] = node_color[d_idx_node[nodeid]]\n","    else:\n","        for nodeid in GVR.nodes():\n","            d_node_colors[nodeid] = node_color\n","\n","    nx.set_node_attributes(GVR, d_node_colors, name=\"nodecolor\")\n","\n","    # --------------------------\n","    # LINK COLOR\n","    # --------------------------\n","    if isinstance(link_color, dict):\n","        # for different link colors\n","        d_edge_color = {}\n","        for a,b in GVR.edges():\n","            try:\n","                color = link_color[(d_idx_node[a],d_idx_node[b])]\n","            except KeyError:\n","                color = link_color[(d_idx_node[b],d_idx_node[a])]\n","            d_edge_color[(a,b)] = color\n","    else:\n","        # for unique link colors\n","        d_edge_color = {}\n","        for a,b in GVR.edges():\n","            d_edge_color[(a,b)] = link_color\n","\n","    nx.set_edge_attributes(GVR, d_edge_color, name=\"linkcolor\")\n","\n","    # --------------------------\n","    # NODE ANNOTATION\n","    # --------------------------\n","    if isinstance(annotations, dict):\n","\n","        l_annotations = [[str(d_idx_node[nodeid])] + [ annotation for annotation in annotations[d_idx_node[nodeid]]] for nodeid in sorted(GVR.nodes())]\n","        d_annotations = dict(zip(sorted(GVR.nodes()), l_annotations))\n","    else:\n","        d_annotations = {nodeid: [str(d_idx_node[nodeid])] for nodeid in GVR.nodes()}\n","\n","    nx.set_node_attributes(GVR, d_annotations, name=\"annotation\")\n","\n","    # --------------------------\n","    # MAKE JSON for uploader\n","    # --------------------------\n","\n","    G_json = json.dumps(nx.node_link_data(GVR))\n","\n","    with open(GVR.name, \"w\") as outfile:\n","        outfile.write(G_json)\n"],"metadata":{"id":"kXzJbyopXB2H","executionInfo":{"status":"ok","timestamp":1689861421968,"user_tz":-120,"elapsed":5,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["### Run the Function\n","\n"],"metadata":{"id":"e_-V-xmjYalO"}},{"cell_type":"code","source":["make_json(\"feature_network.json\", G, pos,node_color=node_colors,communities=node_community)"],"metadata":{"id":"68Jv0wy-YY2R","executionInfo":{"status":"ok","timestamp":1689861422381,"user_tz":-120,"elapsed":418,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["import google.colab.files\n","google.colab.files.download(\"feature_network.json\")"],"metadata":{"id":"aG_fvHr5Z3Z_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689861422381,"user_tz":-120,"elapsed":6,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}},"outputId":"189eeb98-370c-4fd9-f8c9-eae6e78ba93c"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_ad9e48ad-74eb-4cba-b81c-b552bb8fa451\", \"feature_network.json\", 951277)"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"j_N0lO6i8Iu0","executionInfo":{"status":"ok","timestamp":1689861422382,"user_tz":-120,"elapsed":6,"user":{"displayName":"Joel Hancock","userId":"16189644458263281336"}}},"execution_count":17,"outputs":[]}]}